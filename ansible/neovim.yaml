---
- name: Ensure neovim is installed and config for a vs code-like experience
  hosts: factory

  tasks:
    - name: When MacOSX ensure Homebrew packages are installed
      block:
        - name: Update homebrew and upgrade all packages
          community.general.homebrew:
            update_homebrew: yes
            upgrade_all: yes

        - name: When MacOSX ensure neovim (nvim) is installed
          community.general.homebrew:
            name:
              - nvim
              - node
              - yarn
              - fzf
              - watchman
              - pylint
              - mypy
              - black
              - poetry
            state: latest
          retries: "{{ default_retries }}"
          delay: "{{ default_delay }}"
          register: result
          until: result is succeeded
      when: ( ansible_distribution == 'MacOSX' )

    - name: When Archlinux ensure pacman packages are installed
      block:
        - name: Update pacman and upgrade all packages
          community.general.pacman:
            update_cache: yes
            upgrade: yes
          become: yes

        - name: Ensure pacman packages are installed
          community.general.pacman:
            name:
              - neovim
              - nodejs-lts-fermium
              - npm
              - yarn
              - python-black
              - mypy
              - python-pylint
            state: latest
          retries: "{{ default_retries }}"
          delay: "{{ default_delay }}"
          register: result
          until: result is succeeded
          become: yes

        - name: Install packages from AUR using a yay AUR helper
          community.general.pacman:
            name:
              - fzf
              - watchman-bin
              - python-poetry-git
              - python-black
            state: latest
            executable: yay
      when: ( ansible_distribution == 'Archlinux' )

    - name: Ensure pynvim python module is installed for coc-pyright
      ansible.builtin.shell: bash -c 'export PYENV_ROOT="$HOME/.pyenv"; export PATH="$PYENV_ROOT/bin:$PATH"; eval "$(pyenv init --path)"; eval "$(pyenv init -)"; python3 -m pip install --user --upgrade pynvim'

    #- name: Ensure black python module is installed for coc-pyright to be able to call on black for formatting
    #  ansible.builtin.shell: bash -c "python3 -m pip install --user --upgrade black"

    - name: Ensure solargraph gem is installed for coc-solargraph
      ansible.builtin.shell: bash -c '[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm" && gem install solargraph'

    # See: https://prettier.io/docs/en/install.html
    #
    - name: Ensure prettier is installed
      block:
        - name: Ensure {{ HOME }}/.local/bin exist
          ansible.builtin.file:
            path: "{{ HOME}}/.local/bin"
            state: directory

        - name: Ensure package.json exists
          ansible.builtin.shell: sh -c "npm init --yes"

        - name: Install "prettier" node.js package.
          community.general.npm:
            name: "prettier"
            path: "{{ HOME }}/.local/bin"
            state: latest

        - name: Install "neovim" node.js package globally
          block:
            - community.general.npm:
                name: "neovim"
                global: yes
                state: latest
              when: ( ansible_distribution == 'MacOSX' )

            - community.general.npm:
                name: "neovim"
                global: yes
                state: latest
              become: yes
              when: ( ansible_distribution == 'Archlinux' )

        - name: Does `{{ HOME }}/.prettierrc.json` file exist?
          ansible.builtin.stat:
            path: "{{ HOME }}/.prettierrc.json"
          register: prettierrc

        - name: Configure `{{ HOME }}/.prettierrc.json`, only if doesn't exist
          ansible.builtin.shell: sh -c "echo {}> ~/.prettierrc.json"
          when: not prettierrc.stat.exists

        - name: Does `{{ HOME }}/.prettierignore` file exist?
          ansible.builtin.stat:
            path: "{{ HOME }}/.prettierignore"
          register: prettierignore

        - name: Configure `{{ HOME }}/.prettierignore`, only if doesn't exist
          ansible.builtin.shell: sh -c "echo '# Ignore artifacts:'> ~/.prettierignore"
          when: not prettierignore.stat.exists

    - name: Ensure then Minimalist Vim Plugin Manager is installed
      ansible.builtin.shell: sh -c 'curl -fLo "${XDG_DATA_HOME:-$HOME/.local/share}"/nvim/site/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'

    - name: Create {{ HOME }}/.config/nvim directory, if it does not exist
      ansible.builtin.file:
        path: "{{ HOME }}/.config/nvim"
        state: directory

    - name: Copy nvim init.vim configuration file into place
      ansible.builtin.copy:
        src: files/init.vim
        dest: "{{ HOME }}/.config/nvim/init.vim"

    - name: Setting BLACK_PATH when OSX
      set_fact:
        BLACK_PATH: /usr/local/bin
      when: ( ansible_distribution == 'MacOSX' )

    - name: Setting BLACK_PATH when Archlinux
      set_fact:
        BLACK_PATH: /usr/local/bin
      when: ( ansible_distribution == 'Archlinux' )

    - name: Template coc-settings.json configuration file into place
      ansible.builtin.template:
        src: templates/coc-settings.json.tpl
        dest: "{{ HOME }}/.config/nvim/coc-settings.json"

    - name: Ensure Powerline fonts are installed for Vim Airline plugin
      block:
        - name: Ensure {{ HOME }}/.config path exists
          ansible.builtin.file:
            path: "{{ HOME }}/.config"
            state: directory

        - name: Shallow git clone Powerline fonts
          ansible.builtin.git:
            repo: "https://github.com/powerline/fonts.git"
            dest: "{{ HOME }}/.config/powerline"
            depth: 1
            force: yes

        - name: Install Powerline fonts
          ansible.builtin.shell: sh -c "cd $HOME/.config/powerline && ./install.sh"
